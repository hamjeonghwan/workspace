package kr.or.ddit.basic;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class T13_MapTest {
	public static void main(String[] args) {
		// Map = Key 값과 value 값을 한 쌍으로 관리하는 객체 
		// 	=> Key 값은 중복을 허용하지 않고 순서가 없다 (Set의 특징)
		// =>  value 값은 중복을 허용한다 
		
		// 자료추가 => put(key값, value값);
		Map<String, String> map = new HashMap<>();
		
		map.put("name", "전성희");
		map.put("addr", "대덕구");
		map.put("tel", "010-1234-5678");
		System.out.println("map => " + map);
		
		// 자료수정 => 데이터를 저장할 때 key값이 같으면 나중에 입력한 값이 저장된다 
		// => put (수정할 Key값, 새로운 value값) ;
		
		map.put("addr", "강남");		
		System.out.println("map => " + map);
		
		// 자료삭제 => remove(삭제할 Key값);
		
		map.remove("name");
		System.out.println("map => " + map);
		
		// 자료읽기 => get(Key값)
		System.out.println("map => " + map.get("name"));
		System.out.println("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
	
		// key 값들을 읽어와 자료를 출력하는 방법 
		// 방법1 => KeySet() 메서드 이용하기
		// => KeySet() 메서드 : Map 의 Key값들만 읽어와 Set 형으로 반환한다 
		
		Set<String> keySet =map.keySet();
		
		System.out.println("Iterator를 이용한 방법");
		
		Iterator<String> it = keySet.iterator();
		
		while(it.hasNext()) {
			String key = it.next();
			System.out.println(key + ": " + map.get(key));
				
		}
		System.out.println("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
		
		// 방법2 => Set형의 데이터를 '향상된 for문' 으로 처리하면 Iterator를 사용하지 않아도 된다 
		System.out.println("향상된 for문을 이용한 방법");
		
		for(String key : keySet) {
			System.out.println(key + " : " +map.get(key));
		}
		System.out.println("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
		
		// 방법3 => value값만 읽어와 출력하기 => values() 메서드 이용하기 
		System.out.println("values() 메서드를 이용한 방법");
		for(String value : map.values()) {
			System.out.println(value);
		}
		System.out.println("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
		
		
		
	}
}
